# In a network of nodes, each node i is directly connected to another node j if 
# and only if graph[i][j] = 1. 
# 
#  Some nodes initial are initially infected by malware. Whenever two nodes are 
# directly connected and at least one of those two nodes is infected by malware, b
# oth nodes will be infected by malware. This spread of malware will continue unti
# l no more nodes can be infected in this manner. 
# 
#  Suppose M(initial) is the final number of nodes infected with malware in the 
# entire network, after the spread of malware stops. 
# 
#  We will remove one node from the initial list. Return the node that if remove
# d, would minimize M(initial). If multiple nodes could be removed to minimize M(i
# nitial), return such a node with the smallest index. 
# 
#  Note that if a node was removed from the initial list of infected nodes, it m
# ay still be infected later as a result of the malware spread. 
# 
#  
# 
#  
#  
# 
#  Example 1: 
# 
#  
# Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
# Output: 0
#  
# 
#  Example 2: 
# 
#  
# Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
# Output: 0
#  
# 
#  Example 3: 
# 
#  
# Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
# Output: 1
#  
# 
#  
# 
#  Note: 
# 
#  
#  1 < graph.length = graph[0].length <= 300 
#  0 <= graph[i][j] == graph[j][i] <= 1 
#  graph[i][i] == 1 
#  1 <= initial.length <= graph.length 
#  0 <= initial[i] < graph.length 
#  
#  Related Topics Depth-first Search Union Find


# leetcode submit region begin(Prohibit modification and deletion)
class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        m = len(graph)
        n = len(initial)
        ans = initial[0]
        maxEffected = m

        def bfs(graph, initial, k):
            m = len(graph)
            queue = collections.deque()
            effected = []
            visited = set()
            for i in range(len(initial)):
                if i != k:
                    queue.append(initial[i])
                    visited.add(initial[i])

            while queue:
                d = queue.popleft()
                effected.append(d)
                for i in range(m):
                    if graph[d][i] == 1 and i not in visited:
                        queue.append(i)
                        visited.add(i)
            return len(effected)

        for i in range(n):
            effected = bfs(graph, initial, i)
            #print(initial[i], effected)
            if effected < maxEffected:
                ans = initial[i]
                maxEffected = effected
            elif effected == maxEffected and initial[i] < ans:
                ans = initial[i]
        return ans
        
# leetcode submit region end(Prohibit modification and deletion)
